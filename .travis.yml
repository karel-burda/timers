stages:
  - example (C++11) -- build (linux, clang5), valgrind
  - example (C++14) -- cppcheck, build (linux, gcc5), valgrind
  - tests (C++14) -- cppcheck, build (osx, clang8), run

env:
  global:
    - CMAKE_EXAMPLE="cmake -Bbuild -H. -DEXAMPLE:BOOL=ON -DUNIT-TESTS:BOOL=OFF -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo"

jobs:
  fail_fast: true

  include:
    - stage: tests (C++14) -- cppcheck, build (osx, clang8), run
      language: cpp
      compiler: clang
      os: osx
      env: GTEST_COLOR=1
      before_install:
        - brew update
        - brew install cppcheck lcov
        # hacks because of the "cpp-coveralls" for osx :(
        - brew upgrade pyenv
        - eval "$(pyenv init -)"
        - pyenv install 2.7.6
        - pyenv global 2.7.6
        - pyenv rehash
        - pip install cpp-coveralls
        - pyenv rehash
      script:
        - set -e
        - cppcheck --enable=all -I include -I tests/unit/include/ --check-config -v ./tests/unit/
        - cmake -Bbuild -H. -DEXAMPLE:BOOL=OFF -DUNIT-TESTS:BOOL=ON -DCOVERAGE:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Debug
        - cmake --build ./build --target run-all-tests-verbose --config Debug
        - coveralls -e ./build/gtest-src -e ./build/CMakeFiles -e ./tests/unit -e ./example --gcov-options '\-lp'
        - set +e
